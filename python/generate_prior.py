'''
This script generates netcdfs of the absolute and relative prior emissions and error variances for use in an analytical inversion.

   **Inputs**

   | ----------------- | -------------------------------------------------- |
   | Input             | Description                                        |
   | ----------------- | -------------------------------------------------- |
   | emis_file         | A file or files containing information on methane  |
   |                   | emissions from the prior run. This is typically    |
   |                   | given by HEMCO_diagnostics. The input here can be  |
   |                   | either a list of monthly files or a single file    |
   |                   | with an annual average.                            |
   | ----------------- | -------------------------------------------------- |
   | clusters          | The cluster file generated by generate_clusters.py |
   |                   | that maps a unique key for every grid cell         |
   |                   | contained in the state vector to the latitude-     |
   |                   |longitude grid used in the forward model.           |
   | ----------------- | -------------------------------------------------- |
   | rel_err           | The relative error (standard deviation) value to   |
   |                   | be used in the relative prior error covariance     |
   |                   | matrix. The default is 0.5.                        |
   | ----------------- | -------------------------------------------------- |

   **Outputs**

   | ----------------- | -------------------------------------------------- |
   | Output            | Description                                        |
   | ----------------- | -------------------------------------------------- |
   | xa.nc             | A netcdf containing the relative prior (all ones)  |
   |                   | xa for use in the inversion.                       |
   | ----------------- | -------------------------------------------------- |
   | sa.nc             | A netcdf containing the relative prior error (all  |
   |                   | given by rel_err) for use in the inversion.        |
   | ----------------- | -------------------------------------------------- |
   | xa_abs.nc         | A netcdf containing the absolute prior (all ones)  |
   |                   | xa for use in the inversion.                       |
   | ----------------- | -------------------------------------------------- |
   | sa_abs.nc         | A netcdf containing the absolute prior error (all  |
   |                   | given by rel_err) for use in the inversion.        |
   | ----------------- | -------------------------------------------------- |
'''

from os.path import join
import sys

import math
import numpy as np
import xarray as xr

import matplotlib.pyplot as plt

# Custom packages
sys.path.append('.')
import config
# config.SCALE = config.PRES_SCALE
# config.BASE_WIDTH = config.PRES_WIDTH
# config.BASE_HEIGHT = config.PRES_HEIGHT
import gcpy as gc
import troppy as tp
import invpy as ip
import format_plots as fp
import inversion_settings as settings

## ------------------------------------------------------------------------ ##
## Set user preferences
## ------------------------------------------------------------------------ ##
base_dir = '/Users/hannahnesser/Documents/Harvard/Research/TROPOMI_Inversion/'
code_dir = base_dir + 'python'
data_dir = base_dir + 'inversion_data'
plot_dir = base_dir + 'plots'

# The emissions can either be a list of files or a single file
# with an annual average
emis_file = [f'{base_dir}/prior/total_emissions/\
HEMCO_diagnostics.{settings.year:04d}{mm:02d}010000.nc'
             for mm in settings.months]
# emis_file = f'{base_dir}/prior/total_emissions/HEMCO_diagnostics.{settings.year}.nc'
clusters = f'{data_dir}/clusters.nc'

# Set relative prior error covariance value
rel_err = 0.5

## -------------------------------------------------------------------------##
## Save out absolute and relative priors
## -------------------------------------------------------------------------##

## -------------------------------------------------------------------------##
## Load raw emissions data
## -------------------------------------------------------------------------##
emis = gc.read_file(*emis_file)

# Remove emissions from buffer grid cells
emis = gc.subset_data_latlon(emis, *settings.lats, *settings.lons)

if 'time' in emis.dims:
    # Average over time
    emis = emis.mean(dim='time')

    # Save summary file
    name = 'HEMCO_diagnostics.2019.nc'
    emis.to_netcdf(f'{base_dir}/prior/total_emissions/{name}')

# Print a summary table
summ = emis[[var for var in emis.keys() if var[:4] == 'Emis']]*emis['AREA']
summ *= 1e-9*(60*60*24*365) # Adjust units to Tg/yr
summ = summ.sum(dim=['lat', 'lon'])
for k in summ.keys():
    print(f'{k:>20} {summ[k].values:.2f}')

# Adjust units to Mg/km2/yr
emis *= 1e-3*(60*60*24*365)*(1000*1000)

## ---------------------------------- ##
## Plot
## ---------------------------------- ##
if plot_dir is not None:
    emissions = ['Wetlands', 'Livestock',
                ['Coal', 'Oil', 'Gas'],
                ['Wastewater', 'Landfills'],
                ['Termites', 'Seeps', 'BiomassBurn', 'Lakes'],
                ['Rice', 'OtherAnth']]
    titles = ['Wetlands', 'Livestock', 'Coal, Oil, and\nNatural Gas',
              'Wastewater\nand Landfills', 'Other Biogenic\nSources',
              'Other Anthropogenic\nSources']

    # Set colormap
    colormap = fp.cmap_trans('viridis')

    ncategory = len(emissions)
    fig, ax = fp.get_figax(rows=2, cols=math.ceil(ncategory/2),
                           maps=True, lats=emis.lat, lons=emis.lon)
    plt.subplots_adjust(hspace=0.5)
    cax = fp.add_cax(fig, ax, cbar_pad_inches=0.5)
    for i, axis in enumerate(ax.flatten()):
        axis = fp.format_map(axis, lats=emis.lat, lons=emis.lon)
        if type(emissions[i]) == str:
            e = emis['EmisCH4_%s' % emissions[i]].squeeze()
        elif type(emissions[i] == list):
            e = sum(emis['EmisCH4_%s' % em].squeeze()
                    for em in emissions [i])

        c = e.plot(ax=axis, cmap=colormap, vmin=0, vmax=5,
                   add_colorbar=False)
        cb = fig.colorbar(c, cax=cax, ticks=np.arange(0, 6, 1))
        cb = fp.format_cbar(cb, cbar_title=r'Emissions (Mg km$^2$ a$^{-1}$)')
        axis = fp.add_title(axis, titles[i])

    fp.save_fig(fig, plot_dir, 'prior_emissions_2019')

# Select total emissions
emis = emis['EmisCH4_Total']

print('The minimum positive emission is',
      np.abs(emis.where(emis > 0).min()).values)

## -------------------------------------------------------------------------##
## Open clusters
## -------------------------------------------------------------------------##
clusters = xr.open_dataarray(clusters)
nstate = int(clusters.max().values)

## -------------------------------------------------------------------------##
## Generate prior and prior error covariance
## -------------------------------------------------------------------------##
# Relative prior
xa = np.ones(nstate)
xa = xr.DataArray(xa, dims=('nstate'))
xa.to_netcdf(join(data_dir, 'xa.nc'))

# Relative errors
sa = rel_err**2*np.ones(nstate)
sa = xr.DataArray(sa, dims=('nstate'))
sa.to_netcdf(join(data_dir, 'sa.nc'))

# Absolute prior
xa_abs = ip.clusters_2d_to_1d(clusters, emis)
xa_abs = xr.DataArray(xa_abs, dims=('nstate'))
xa_abs.to_netcdf(join(data_dir, 'xa_abs.nc'))

# Absolute errors
sa_abs = sa*xa_abs**2
sa_abs.to_netcdf(join(data_dir, 'sa_abs.nc'))
